forEach: Aggregate
fileName: {{namePascalCase}}Grid.vue
path: frontend-wijmo/src/components/ui
---
<template>
    <div style="max-height:80vh;">
        <div class="hierarchy">
            <div>{{#boundedContext}}{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}}{{/boundedContext}} &nbsp; ></div>
            <div>&nbsp; {{#ifNotNull displayName namePascalCase}}{{/ifNotNull}}</div>
        </div>
        <div class="gs-bundle-of-buttons" style="max-height:10vh;">
            <v-btn @click="addNewRow" class="contrast-primary-text" small color="primary" :disabled="!hasRole('{{contexts.actors.postActor.name}}')">
                <v-icon small>mdi-plus-circle-outline</v-icon>등록
            </v-btn>
            <v-btn  @click="editSelectedRow" class="contrast-primary-text" small color="primary" :disabled="!hasRole('{{contexts.actors.putActor.name}}')">
                <v-icon small>mdi-pencil</v-icon>수정
            </v-btn>
            {{#commands}}
            {{^isRestRepository}}
            <v-btn {{#if fieldDescriptors}}@click="{{nameCamelCase}}Dialog = true"{{else}}@click="{{nameCamelCase}}"{{/if}} class="contrast-primary-text" small color="primary" {{#if (attachedActorName actorName)}}:disabled="!hasRole('{{actorName}}')"{{/if}}>
                <v-icon small>mdi-minus-circle-outline</v-icon>{{#ifNotNull displayName name}}{{/ifNotNull}}
            </v-btn>
            {{#if fieldDescriptors}}
            <v-dialog v-model="{{nameCamelCase}}Dialog" width="500">
                <{{namePascalCase}}Command
                    @closeDialog="{{nameCamelCase}}Dialog = false"
                    @{{nameCamelCase}}="{{nameCamelCase}}"
                ></{{namePascalCase}}Command>
            </v-dialog>
            {{/if}}
            {{/isRestRepository}}
            {{/commands}}
            <v-btn @click="deleteSelectedRows" class="contrast-primary-text" small color="primary" :disabled="!hasRole('{{contexts.actors.deleteActor.name}}')">
                <v-icon small>mdi-minus-circle-outline</v-icon>삭제
            </v-btn>
            <excel-export-button class="contrast-primary-text" :exportService="this.exportService" :getFlex="getFlex" />
        </div>
        {{#attached 'View' this}}
        <{{namePascalCase}} @search="search"></{{namePascalCase}}>
        {{/attached}}


        <!-- the grid -->
        <wj-flex-grid
            ref="flexGrid"
            :key="value.length"
            :autoGenerateColumns="false"
            :allowAddNew="false"
            :allowDelete="true"
            :allowPinning="'SingleColumn'"
            :newRowAtTop="false"
            :showMarquee="true"
            :selectionMode="'MultiRange'"
            :validateEdits="false"
            :itemsSource="value"
            :initialized="flexInitialized"
            :selectionChanged="onSelectionChanged"
            style="margin-top:10px; max-height:65vh;"
            class="wj-felx-grid"
        >
            <wj-flex-grid-filter :filterColumns="['RowHeader',{{#aggregateRoot.fieldDescriptors}}{{#unless isKey}}{{#if (isNotId nameCamelCase)}}'{{nameCamelCase}}',{{/if}}{{/unless}}{{/aggregateRoot.fieldDescriptors}}]" />
            <wj-flex-grid-cell-template cellType="RowHeader" v-slot="cell">\{{cell.row.index + 1}}</wj-flex-grid-cell-template>
            {{#aggregateRoot.fieldDescriptors}}
            {{#unless isKey}}
            {{#if (isNotId nameCamelCase)}}
            {{#if isVO}}
            {{#checkVO className}}
            <wj-flex-grid-column binding="{{nameCamelCase}}" header="{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}}" width="2*" :isReadOnly="true" align="center">
                <wj-flex-grid-cell-template cellType="Cell" v-slot="cell">   
                    <{{className}} v-model="cell.item.{{nameCamelCase}}" :editMode="editMode"></{{className}}>
                </wj-flex-grid-cell-template>
            </wj-flex-grid-column>
            {{/checkVO}}
            {{else}}
            <wj-flex-grid-column binding="{{nameCamelCase}}" header="{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}}" width="2*" :isReadOnly="true" align="center" />
            {{/if}}
            {{/if}}
            {{/unless}}
            {{/aggregateRoot.fieldDescriptors}}
            {{#outgoingRelations}}
            {{#target}}
            <wj-flex-grid-column binding="{{nameCamelCase}}Id" header="{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}}" width="2*" :isReadOnly="true" align="center">
                <wj-flex-grid-cell-template cellType="Cell" v-slot="cell">   
                    <{{namePascalCase}}Id v-model="cell.item.{{nameCamelCase}}Id" :editMode="editMode"></{{namePascalCase}}Id>
                    \{{ cell.item.{{#getNameField aggregateRoot.fieldDescriptors}}{{/getNameField}} }}
                </wj-flex-grid-cell-template>
            </wj-flex-grid-column>
            {{/target}}
            {{/outgoingRelations}}
        </wj-flex-grid>
        {{#aggregateRoot.fieldDescriptors}}
        {{#if isList}}
        <{{getEntityFromList className}}DetailGrid label="{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}}" offline v-if="selectedRow" v-model="selectedRow.{{nameCamelCase}}"/>
        {{/if}}
        {{/aggregateRoot.fieldDescriptors}}
        <v-col>
            <v-dialog
                v-model="openDialog"
                transition="dialog-bottom-transition"
                width="35%"
            >
                <template>
                    <v-card>
                        <v-toolbar
                            color="primary"
                            class="elevation-0"
                            height="50px"
                        >
                            <div style="color:white; font-size:17px; font-weight:700;">{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}} 등록</div>
                            <v-spacer></v-spacer>
                            <v-icon
                                color="white"
                                small
                                @click="closeDialog()"
                            >mdi-close</v-icon>
                        </v-toolbar>
                        <v-card-text>
                            <{{namePascalCase}} :offline="offline"
                                :isNew="!itemToEdit"
                                :editMode="true"
                                v-model="newValue"
                                @add="append"
                                @edit="edit"
                            />
                        </v-card-text>
                    </v-card>
                </template>
            </v-dialog>
        </v-col>
        <v-col style="margin-bottom:40px;">
            <div class="text-center">
                <v-dialog
                    width="332.5"
                    fullscreen
                    hide-overlay
                    transition="dialog-bottom-transition"
                >
                    <v-btn
                        style="position:absolute; top:2%; right:2%"
                        @click="closeDialog()"
                        depressed
                        icon 
                        absolute
                    >
                        <v-icon>mdi-close</v-icon>
                    </v-btn>
                </v-dialog>
            </div>
        </v-col>
    </div>
</template>

<script>
import BaseGrid from '../base-ui/BaseGrid'

export default {
    name: '{{nameCamelCase}}Grid',
    mixins:[BaseGrid],
    components:{
    },
    data: () => ({
        path: '{{namePlural}}',
        {{#commands}}
        {{^isRestRepository}}
        {{#if fieldDescriptors}}
        {{nameCamelCase}}Dialog: false,
        {{/if}}
        {{/isRestRepository}}
        {{/commands}}
    }),
    watch: {
    },
    methods:{
        {{#commands}}
        {{^isRestRepository}}
        {{nameCamelCase}}({{#if fieldDescriptors}}params{{/if}}){
            try{
                this.repository.invoke(this.getSelectedItem(), "{{nameCamelCase}}", {{#if fieldDescriptors}}params{{else}}null{{/if}})
                this.$EventBus.$emit('show-success','{{#ifNotNull displayname name}}{{/ifNotNull}} 성공적으로 처리되었습니다.')
                {{#if fieldDescriptors}}
                this.{{nameCamelCase}}Dialog = false
                {{/if}}
            }catch(e){
                this.$EventBus.$emit('show-error', e);
            }
            
        },
        {{/isRestRepository}}
        {{/commands}}
    }
}
</script>
<function>

var me = this;

if (me && me.attached) {
    var postCmd = me.attached.find(ele => ele._type.includes("Command") && (ele.isExtendedVerb==true && ele.controllerInfo.method=="POST") || (ele.isRestRepository==true && ele.restRepositoryInfo.method=="POST"));
    var putCmd = me.attached.find(ele => ele._type.includes("Command") && (ele.isExtendedVerb==true && ele.controllerInfo.method=="PUT") || (ele.isRestRepository==true && ele.restRepositoryInfo.method=="PUT"));
    var deleteCmd = me.attached.find(ele => ele._type.includes("Command") && (ele.isExtendedVerb==true && ele.controllerInfo.method=="DELETE") || (ele.isRestRepository==true && ele.restRepositoryInfo.method=="DELETE"));

    me.contexts.actors = {};

    if (postCmd && postCmd.attached) {
        var postActor = postCmd.attached.find(ele => ele._type.includes("Actor"));
        if (postActor) {
            me.contexts.actors.postActor = postActor;
        }
    }
    
    if (putCmd && putCmd.attached) {
        var putActor = putCmd.attached.find(ele => ele._type.includes("Actor"));
        if (putActor) {
            me.contexts.actors.putActor = putActor;
        }
    }
    
    if (deleteCmd && deleteCmd.attached) {
        var deleteActor = deleteCmd.attached.find(ele => ele._type.includes("Actor"));
        if (deleteActor) {
            me.contexts.actors.deleteActor = deleteActor;
        }
    }
}
window.$HandleBars.registerHelper('getPickerName', function (fieldDescriptors) {
    for(var i = 0; i < fieldDescriptors.length; i ++ ){
        if(fieldDescriptors[i] && fieldDescriptors[i].isName == true){
            return fieldDescriptors[i].nameCamelCase
        }else{
            return fieldDescriptors[0].nameCamelCase
        }
    }
})
window.$HandleBars.registerHelper('getNameField', function (fieldDescriptors) {
    for(var i = 0; i < fieldDescriptors.length; i ++ ){
        if(fieldDescriptors[i] && fieldDescriptors[i].isName == true){
            return fieldDescriptors[i].nameCamelCase
        }else if(fieldDescriptors[i].isName == false && fieldDescriptors[i].isKey == false){
            return fieldDescriptors[i].nameCamelCase
        }
    }
});
window.$HandleBars.registerHelper('checkVO', function (className, options) {
    if(className.endsWith("Address") || className.endsWith("Photo") || className.endsWith("User") || className.endsWith("Email") 
            || className.endsWith("Payment") || className.endsWith("Money") || className.endsWith("Weather") || className.endsWith("Rating") ){
        return options.fn(this);
    }
})
window.$HandleBars.registerHelper('getEntityFromList', function (className) {
    if(className.includes("List<") && className.includes(">")) {
        return className.replace("List<", "").replace(">", "");
    }
    return className;
})

window.$HandleBars.registerHelper('ifNotNull', function (displayName, name) {
    if(displayName){
        return displayName;
    }else{
        return name;
    }
})

window.$HandleBars.registerHelper('isNotId', function (className) {
    return (className != 'id')
})
window.$HandleBars.registerHelper('attachedActorName', function (actorName, options) {
    try {
        if(actorName) {
            return true;
        } else {
            return false;
        }
    } catch(e) {
        console.log(e)
    }
})
</function>
